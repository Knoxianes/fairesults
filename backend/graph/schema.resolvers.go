package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"Knoxiaes/fairesults/graph/model"
	gincontext "Knoxiaes/fairesults/handlers/ginContext"
	"Knoxiaes/fairesults/handlers/graphqlHandlers"
	"Knoxiaes/fairesults/helpers"
	"context"
	"log"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (int, error) {
	return graphqlHandlers.CreateUser(input)
}

// CreateResult is the resolver for the createResult field.
func (r *mutationResolver) CreateResult(ctx context.Context, input model.NewResult) (*model.Result, error) {
	return graphqlHandlers.CreateResult("test5", input)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (string, error) {
	c, err := gincontext.GinContextFromContext(ctx)
	if err != nil {
		log.Println(err)
		return "", helpers.CustomError{Message: err.Error(), Code: 0}
	}
	return graphqlHandlers.Login(c, input)
}

// UpdatePassword is the resolver for the updatePassword field.
func (r *mutationResolver) UpdatePassword(ctx context.Context, input model.UpdatePassword) (bool, error) {
	c, err := gincontext.GinContextFromContext(ctx)
	if err != nil {
		log.Println(err)
		return false, helpers.CustomError{Message: err.Error(), Code: 0}
	}

	username, err := helpers.ParseTokenFromContext(c)
	if err != nil {
		return false, err
	}

	if input.OldPassword == nil {
		return graphqlHandlers.ResetPassword(username, input.NewPassword)
	}
	return graphqlHandlers.UpdatePassword(username, input)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.NewUser) (bool, error) {
	c, err := gincontext.GinContextFromContext(ctx)
	if err != nil {
		log.Println(err)
		return false, helpers.CustomError{Message: err.Error(), Code: 0}
	}


	username, err := helpers.ParseTokenFromContext(c)
	if err != nil {
		return false, err
	}
	return graphqlHandlers.UpdateUser(username, input)
}

// UpdateResult is the resolver for the updateResult field.
func (r *mutationResolver) UpdateResult(ctx context.Context, input model.UpdatedResult) (bool, error) {
	c, err := gincontext.GinContextFromContext(ctx)
	if err != nil {
		log.Println(err)
		return false, helpers.CustomError{Message: err.Error(), Code: 0}
	}


	username, err := helpers.ParseTokenFromContext(c)
	if err != nil {
		return false, err
	}
	return graphqlHandlers.UpdateResult(username, input)
}

// User is the resolver for the User field.
func (r *queryResolver) User(ctx context.Context, numberOfResults *int) (*model.User, error) {
	if numberOfResults == nil {
		return graphqlHandlers.User(1, 0)
	}
	return graphqlHandlers.User(1, *numberOfResults)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
